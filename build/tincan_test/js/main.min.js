'use strict';

var templates = angular.module("templates",[]);

var coreApp = angular.module('coreApp',
  [
    'templates',
    'ngAnimate',
    'ngMaterial',
    'ngStorage',
    'hljs'
  ]);

angular.element(document).ready(preConfig);

function preConfig() {

  var course =
  {
    "course": {
      "title": "Demo course",
      "chapters": [
        {
          "id": "1",
          "title": "Chapter 1 title",
          "pages": [
            {
              "id": "page_1_0",
              "title": "Page 1_0 title",
              "components": [
                {
                  "pageTemplateUrl": "templates/page_1_0.html"
                }
              ]
            }
          ]
        }
      ]
    }
  };
  var structure = {
    config: {
      "god_mode": "true",
      "page_block": "false",
      "ex_block": "false",
      "default_localization": 0,
      "localizations": ["ru"],
      "success_score": "100"
    },
    courses: [course],
    course: course
  };
  var tincan_config = {
    "lrs": [
      {
        "id": "scorm_cloud",
        "endpoint": "https://cloud.scorm.com/tc/B89WRZM4E5/",
        "username": "ralict@mail.ru",
        "password": "MegaLearner2016"
      },
      {
        "id": "webtutor",
        "endpoint": "http://dn-srv7:8000/lrs",
        "username": "user1",
        "password": "user1"
      }
    ],
    "defaultActor": {
      "mbox": "mailto:user@usermail.com",
      "name": "Mr User"
    },
    "defaultActivity": {
      "id": "nd/course_id/module_id",
      "title": {
        "ru": "Демо Курс",
        "en-US": "Demo Course"
      },
      "description": {
        "ru": "Описание курса на русском языке",
        "en-US": "Course description in English"
      }
    }
  };

  coreApp.value("$structure", structure);
  coreApp.value("$tincanConfig", tincan_config);
  coreApp.constant("$lmsConnected", false);

  console.log("Bootstrapping AngularJS...");
  angular.bootstrap(document.body, ['coreApp']);
}

/**
 * Created by aklimenko on 09.04.16.
 *
 * @ngdoc service
 * @name coreApp:TinCanManager
 *
 * @description
 *
 * - sets config from $structure and $tincanConfig values *
 * - creates array of LRS objects
 * - send/retrieves statements to/from lrsList
 * - send/retrieves states to/from lrsList
 *
 * */
"use strict";

angular.module('coreApp')
  .service('TinCanManager', [
    '$q',
    '$localStorage',
    '$tincanConfig',
    function ($q,
              $localStorage,
              $tincanConfig) {

      var TM = this;
      var config = $tincanConfig;
      var _lrsList;

      /**
       * Creates LRS object from config params
       *
       * {
     *   "id": "webtutor",
     *   "endpoint": "",
     *   "username": "user1",
     *   "password": "user1"
     * }
       *
       * @param lrs
       * @returns {*}
       */
      function configLRS(lrs) {
        var _lrs;

        try {
          _lrs = new TinCan.LRS(
            {
              endpoint: lrs.endpoint,
              username: lrs.username,
              password: lrs.password,
              allowFail: false
            }
          );
        } catch (ex) {
          console.log("Failed to setup LRS object: ", ex);
          return null;
        }
        console.log("Successfully setup LRS object", _lrs);

        return _lrs;
      }

      TM.addLrs = function () {

      };

      TM.get = {

        _getLrsList: function () {
          if (_lrsList && _lrsList.length == config.lrs.length) return _lrsList;
          _lrsList = [];
          angular.forEach(config.lrs, function (lrs, lrsNum) {
            var lrs_ready = configLRS(lrs);
            if (lrs_ready) _lrsList.push(lrs_ready)
          });
          return _lrsList;
        },

        get lrsList() {
          return this._getLrsList();
        },

        /**
         *
         * @returns {TinCan.Agent}
         */
        get defaultActor() {
          return new TinCan.Agent({
            //Basic authentification
            mbox: config.defaultActor.mbox, //user e-mail
            name: config.defaultActor.name //user name

            //#################################
            //Identify user by his account in our system
            //Works great with https://cloud.scorm.com/

            //account: new TinCan.AgentAccount({
            //  homePage:'https://cloud.scorm.com/',
            //  name:$localStorage.userAccount
            //})
            //################################
          })
        },

        /**
         *
         * @returns {TinCan.Activity}
         */
        get courseActivity() {
          return new TinCan.Activity({
            id: "http://adlnet.gov/courses/" + config.defaultActivity.id,
            definition: new TinCan.ActivityDefinition({
              name: config.defaultActivity.title,
              description: config.defaultActivity.description,
              type: "http://adlnet.gov/expapi/activities/course"
            })
          });
        },

        /**
         *
         * @returns {{progress}}
         * @constructor
         */
        get STATE() {
          return {
            get progress() {
              return 'progress'
            }
          }
        },

        /**
         * Returns TinCanVerb in different languages
         * @returns {{attempted, suspended, completed, exited, initialized, experienced, passed, failed, mastered, voided}}
         * @constructor
         */
        get VERB() {

          function getVerb(eng, ru) {
            return new TinCan.Verb({
              id: "http://adlnet.gov/expapi/verbs/" + eng,
              display: {
                "en-US": eng,
                "ru": ru
              }
            })
          }

          return {
            get attempted() {
              return getVerb('attempted', 'приступил к')
            },
            get suspended() {
              return getVerb('suspended', 'приостановил')
            },
            get completed() {
              return getVerb('completed', 'окончил')
            },
            get exited() {
              return getVerb('exited', 'закрыл')
            },
            get initialized() {
              return getVerb('initialized', 'начал')
            },
            get experienced() {
              return getVerb('experienced', 'просмотрел')
            },
            get passed() {
              return getVerb('passed', 'прошел')
            },
            get failed() {
              return getVerb('failed', 'провалил')
            },
            get mastered() {
              return getVerb('mastered', 'отлично справился с')
            },
            get voided() {
              return getVerb('voided', 'удалил')
            }
          }
        }
      };

      /**
       * Sends all statements from $localStorage
       *
       * @returns {deferred.promise|{then, always}}
       */
      TM.sendStatements = function () {
        var deferred = $q.defer();

        if (!TM.get.lrsList.length) {
          deferred.reject('no lrs found');
          return deferred.promise;
        }

        var saved_count = 0;
        var errors = [];
        var successed = [];
        var response_counter = 0;

        angular.forEach(TM.get.lrsList, function (lrs, lrsNum) {
          lrs.saveStatements(
            $localStorage.statements,
            {
              callback: function (err, xhr) {
                if (err !== null) {
                  if (xhr !== null) {
                    var err_msg = "Failed to save statement: " +
                      xhr.responseText + " (" + xhr.status + ")";
                  }

                  console.log("Failed to save statement: ", err);
                  errors.push({
                    lrs: lrs.endpoint,
                    err: err,
                    xhr: xhr
                  })
                } else {
                  successed.push({
                    lrs: lrs.endpoint
                  });
                  saved_count++;
                }
                countResponse()
              }
            }
          );
        });

        function countResponse() {
          response_counter++;
          if (response_counter == TM.get.lrsList.length) {
            if (saved_count > 0) {
              deferred.resolve({
                msg: 'success',
                errList: errors,
                successed: successed
              });
            } else {
              deferred.reject(errors);
            }
          }
        }

        return deferred.promise;
      };
      /**
       * Sends statement
       *
       * @returns {deferred.promise|{then, always}}
       */
      TM.sendStatement = function (stmnt) {
        var deferred = $q.defer();

        if (!TM.get.lrsList.length) {
          deferred.reject('no lrs found');
          return deferred.promise;
        }

        var saved_count = 0;
        var errors = [];
        var successed = [];
        var response_counter = 0;

        angular.forEach(TM.get.lrsList, function (lrs, lrsNum) {
          lrs.saveStatement(
            stmnt,
            {
              callback: function (err, xhr) {
                if (err !== null) {
                  if (xhr !== null) {
                    var err_msg = "Failed to save statement: " +
                      xhr.responseText + " (" + xhr.status + ")";
                  }

                  console.log("Failed to save statement: ", err);
                  errors.push({
                    lrs: lrs.endpoint,
                    err: err,
                    xhr: xhr
                  })
                } else {
                  successed.push({
                    lrs: lrs.endpoint
                  });
                  saved_count++;
                }
                countResponse()
              }
            }
          );
        });

        function countResponse() {
          response_counter++;
          if (response_counter == TM.get.lrsList.length) {
            if (saved_count > 0) {
              deferred.resolve({
                msg: 'success',
                errList: errors,
                successed: successed
              });
            } else {
              deferred.reject(errors);
            }
          }
        }

        return deferred.promise;
      };

      /**
       * Сохранить статус курса
       *
       * Sends all states from $localStorage.states
       *
       * @param key
       * @param val
       * @returns {deferred.promise|{then, always}}
       */

      TM.sendState = function (key, val) {
        var deferred = $q.defer();

        if (!TM.get.lrsList.length) {
          deferred.reject('no lrs found');
          return deferred.promise;
        }

        var saved_count = 0;
        var errors = [];
        var successed = [];
        var response_counter = 0;

        angular.forEach(TM.get.lrsList, function (lrs, lrsNum) {
          lrs.saveState(
            key,
            val,
            {
              agent: TM.get.defaultActor,
              activity: TM.get.courseActivity,
              contentType: "application/json",
              callback: function (err, xhr) {
                if (err !== null) {
                  if (xhr !== null) {
                    var err_msg = "Failed to save state: " +
                      xhr.responseText + " (" + xhr.status + ")";
                  }

                  console.log("Failed to save state: ", err);
                  errors.push({
                    lrs: lrs.endpoint,
                    err: err,
                    xhr: xhr
                  })
                } else {
                  successed.push({
                    lrs: lrs.endpoint
                  });
                  saved_count++;
                }
                countResponse();
              }
            }
          );
        });


        function countResponse() {
          response_counter++;
          if (response_counter == TM.get.lrsList.length) {
            if (saved_count > 0) {
              deferred.resolve({
                msg: 'success',
                errList: errors,
                successed: successed
              });
            } else {
              deferred.reject(errors);
            }
          }
        }

        return deferred.promise;
      };

      /**
       * Get state by key
       * - TODO: last by timestamp from lrsList
       *
       * @param key
       * @returns {deferred.promise|{then, always}}
       */
      TM.getState = function (key) {
        var deferred = $q.defer();

        if (!TM.get.lrsList.length) {
          deferred.reject('no lrs found');
          return deferred.promise;
        }

        var result_states = [];
        var errors = [];

        var response_counter = 0;

        angular.forEach(TM.get.lrsList, function (lrs, lrsNum) {
          lrs.retrieveState(
            key,
            {
              agent: TM.get.defaultActor,
              activity: TM.get.courseActivity,
              contentType: "application/json",
              callback: function (err, result) {
                if (err !== null) {

                  console.log("Failed to get state: ", err);
                  errors.push(err);
                } else {
                  result_states.push(result);
                }

                countResponse();
              }
            }
          );
        });

        function countResponse() {
          response_counter++;
          if (response_counter == TM.get.lrsList.length) {
            if (result_states.length > 0) {
              deferred.resolve({
                msg: 'success',
                results: result_states,
                errList: errors
              });
            } else {
              deferred.reject(errors);
            }
          }
        }

        return deferred.promise;
      };
    }
  ]);
/**
 * Created by aklimenko on 09.04.2016.
 *
 * Generates statements to in TinCan format
 */
"use strict";

coreApp.factory('TinCanStatement', ['TinCanManager', '$localStorage', function (TinCanManager, $localStorage) {
  /** https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md#40-statement **/

  //TODO: set context to course/chapter
  //context: {
  //  contextActivities: {
  //    grouping: [
  //      {
  //        id: "http://adlnet.gov/courses/compsci/CS204/",
  //        definition: {
  //          name: {
  //            "en-US": "CS204"
  //          },
  //          description: {
  //            "en-US": "The activity representing the course CS204"
  //          },
  //          type: "http://adlnet.gov/expapi/activities/course"
  //        }
  //      },
  //      {
  //        id: "http://adlnet.gov/courses/compsci/CS204/lesson01/01?attemptId=50fd6961-ab6c-4e75-e6c7-ca42dce50dd6",
  //        definition: {
  //          name: {
  //            "en-US": "Attempt of CS204 lesson 01"
  //          },
  //          description: {
  //            "en-US": "The activity representing an attempt of lesson 01 in the course CS204"
  //          },
  //          type: "http://adlnet.gov/expapi/activities/attempt"
  //        }
  //      }
  //    ],
  //    category: [
  //      {
  //        id: "https://w3id.org/xapi/adl/profiles/scorm"
  //      }
  //    ]
  //  }
  //}
  //},{
  //  storeOriginal:false, //-true if we need to store statement as JSON and get it later by |statement.originalJSON|
  //  doStamp:true //Whether to automatically set the 'id' and 'timestamp' properties (default: true)
  //});

  return {
    /** http://xapi.vocab.pub/datasets/adl/ **/

    /** http://activitystrea.ms/specs/json/schema/activity-schema.html **/
    //курс запущен
    courseAttempted: new TinCan.Statement({
      actor: TinCanManager.get.defaultActor,
      target: TinCanManager.get.courseActivity,
      verb: TinCanManager.get.VERB.attempted
    }, {
      storeOriginal: false, //-true if we need to store statement as JSON and get it later by |statement.originalJSON|
      doStamp: true //Whether to automatically set the 'id' and 'timestamp' properties (default: true)
    }),

    //курс приостановлен
    courseSuspended: function (score) {
      new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: TinCanManager.get.courseActivity,
        verb: TinCanManager.get.VERB.suspended,
        result: new TinCan.Result({
          score: new TinCan.Score({
            scaled: $localStorage.progress.course.score
          })
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //курс закрыт
    courseExited: function (score) {
      new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: TinCanManager.get.courseActivity,
        verb: TinCanManager.get.VERB.exited,
        result: new TinCan.Result({
          score: new TinCan.Score({
            scaled: $localStorage.progress.course.score
          })
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //курс успешно завершен
    courseCompleted: function (score) {
      new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: TinCanManager.courseActivity,
        verb: TinCanManager.VERB.completed,
        result: new TinCan.Result({
          score: new TinCan.Score({
            scaled: score
            //min:0,
            //max:100,
            //raw:score_raw
          })
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //глава начата
    chapterInitialized: function (chapter) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" + $localStorage.progress.course.id + "/" + chapter.id,
          definition: new TinCan.ActivityDefinition({
            name: chapter.name,
            description: chapter.description,
            type: "http://adlnet.gov/expapi/activities/chapter"
          })
        }),
        verb: TinCanManager.get.VERB.initialized
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //глава завершена
    chapterPassed: function (chapter) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" + $localStorage.progress.course.id + "/" + chapter.id,
          definition: new TinCan.ActivityDefinition({
            name: chapter.name,
            description: chapter.description,
            type: "http://adlnet.gov/expapi/activities/chapter"
          })
        }),
        verb: TinCanManager.get.VERB.passed
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //страница просмотрена
    lessonExperienced: function (chapter, page) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id,
          definition: new TinCan.ActivityDefinition({
            name: page.name,
            description: page.description,
            type: "http://adlnet.gov/expapi/activities/lesson"
          })
        }),
        verb: TinCanManager.get.VERB.experienced
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //картинка/текст/видео просмотрены
    mediaExperienced: function (chapter, page, media) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id + "/" +
          media.id,
          definition: new TinCan.ActivityDefinition({
            name: media.name,
            description: media.description,
            type: "http://adlnet.gov/expapi/activities/media"
          })
        }),
        verb: TinCanManager.get.VERB.experienced
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //интерактив начат
    interactionAttempted: function (chapter, page, interaction) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id + "/" +
          interaction.id,
          definition: new TinCan.ActivityDefinition({
            name: interaction.name,
            description: interaction.description,
            type: "http://adlnet.gov/expapi/activities/interaction"
          })
        }),
        verb: TinCanManager.get.VERB.attempted
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //интерактив пройден
    interactionPassed: function (chapter, page, interaction) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id + "/" +
          interaction.id,
          definition: new TinCan.ActivityDefinition({
            name: interaction.name,
            description: interaction.description,
            type: "http://adlnet.gov/expapi/activities/interaction"
          })
        }),
        verb: TinCanManager.get.VERB.passed,
        result: new TinCan.Result({
          score: new TinCan.Score(interaction.score)
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //интерактив завершен неудачно
    interactionFailed: function (chapter, page, interaction) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id + "/" +
          interaction.id,
          definition: new TinCan.ActivityDefinition({
            name: interaction.name,
            description: interaction.description,
            type: "http://adlnet.gov/expapi/activities/interaction"
          })
        }),
        verb: TinCanManager.get.VERB.failed,
        result: new TinCan.Result({
          score: new TinCan.Score(interaction.score)
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //интерактив завершен успешно
    interactionMastered: function (chapter, page, interaction) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        target: new TinCan.Activity({
          id: "http://adlnet.gov/courses/" +
          $localStorage.progress.course.id + "/" +
          chapter.id + "/" +
          page.id + "/" +
          interaction.id,
          definition: new TinCan.ActivityDefinition({
            name: interaction.name,
            description: interaction.description,
            type: "http://adlnet.gov/expapi/activities/interaction"
          })
        }),
        verb: TinCanManager.get.VERB.mastered,
        result: new TinCan.Result({
          score: new TinCan.Score(interaction.score)
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    },

    //обнулить statement
    voidStatement: function (id) {
      return new TinCan.Statement({
        actor: TinCanManager.get.defaultActor,
        verb: TinCanManager.get.VERB.voided,
        object: new TinCan.StatementRef({
          id: id
        })
      }, {
        storeOriginal: false,
        doStamp: true
      })
    }


  }
}]);
/**
 * Created by ralic on 10.04.2016.
 */

"use strict";

coreApp.factory('TestTinCanService', ['$q', '$localStorage', 'TinCanManager',
  function ($q, $localStorage, TinCanManager) {

    var TestTinCan = {};

    var sampleModule = {
      id: 'chapter0',
      name: {
        "en-US": "chapter0",
        "ru": "Глава 0"
      },
      description: {
        "en-US": "Description for Course Chapter 0",
        "ru": "Описание нулевой главы"
      }
    };

    var samplePage = {
      id: 'page0',
      name: {
        "en-US": "page0",
        "ru": "Страница 0"
      },
      description: {
        "en-US": "Description for Course Chapter Page 0",
        "ru": "Описание нулевой страницы"
      }
    };

    var sampleMedia = {
      id: 'media0',
      name: {
        "en-US": "Video0",
        "ru": "Видео 0"
      },
      description: {
        "en-US": "Description for Course Chapter Page Video 0",
        "ru": "Описание видео в нулевой странице"
      }
    };

    var sampleInteraction = {
      id: 'interaction0',
      name: {
        "en-US": "Interaction0",
        "ru": "Интерактив 0"
      },
      description: {
        "en-US": "Description for Course Chapter Page Interaction 0",
        "ru": "Описание для видео 0 на странице 0 в главе 0 в курсе"
      },
      score: {
        completion: true,
        score: 1
      }
    };

    //$localStorage.statements.push(TinCanStatement.courseAttempted);
    //$localStorage.statements.push(TinCanStatement.courseSuspended);
    //$localStorage.statements.push(TinCanStatement.courseCompleted);
    //$localStorage.statements.push(TinCanStatement.courseExited);
    //$localStorage.statements.push(TinCanStatement.moduleInitialized(sampleModule));
    //$localStorage.statements.push(TinCanStatement.lessonExperienced(sampleModule, samplePage));
    //$localStorage.statements.push(TinCanStatement.mediaExperienced(sampleModule, samplePage, sampleMedia));
    //$localStorage.statements.push(TinCanStatement.interactionAttempted(sampleModule, samplePage, sampleInteraction));
    //$localStorage.statements.push(TinCanStatement.interactionPassed(sampleModule, samplePage, sampleInteraction));
    //$localStorage.statements.push(TinCanStatement.interactionFailed(sampleModule, samplePage, sampleInteraction));
    //$localStorage.statements.push(TinCanStatement.interactionMastered(sampleModule, samplePage, sampleInteraction));


    function getDataFromLRS(param) {
      var promise = TinCanManager.get(param);
      promise.then(function (sr) {
        console.log('data get -> success:', sr);
      }, function (reason) {
        console.log("can't get data ->", reason);
      });
    }

    function removeStatements(st_selector) {
      var promise = TinCanManager.get(st_selector);
      promise.then(function (sr) {
        console.log('data get -> success:', sr);
        voidStatements(sr);
      }, function (reason) {
        console.log("can't get data ->", reason);
      });

      function voidStatements(statements) {
        $.each(statements, function (key, st) {
          var voidStmt = TinCanStatement.voidStatement(st.id);
          $localStorage.statements.push(voidStmt);
        });
        TinCanManager.send();
      }
    }

    function saveBookmark(location) {
      var promise = TinCanManager.sendState(TinCanManager.STATES.bookmark, location);
      promise.then(function (result) {
        console.log('bookmark saved -> ', result);
        getBookmark();
      }, function (reason) {
        console.log("can't get bookmark ->", reason);
      });
    }

    function getBookmark() {
      var promise = TinCanManager.getState(TinCanManager.STATES.bookmark);
      promise.then(function (result) {
        console.log('Got bookmark -> ', result);
      }, function (reason) {
        console.log("can't get bookmark ->", reason);
      });
    }

    return {

      testSendStatements: function () {
        var sendPromise = TinCanManager.send();
        sendPromise.then(function (resolved) {
          console.log('statement send ->', resolved);
        }, function (reason) {
          console.log("can't send ->", reason);
        });
      },

      testGetStatements: function () {

        var st_selector = {
          agent: new TinCan.Agent({
            mbox: $localStorage.userEmail
          })
        };

        getDataFromLRS(st_selector);
      },

      testRemoveStatements: function () {

        var st_selector = {
          agent: new TinCan.Agent({
            mbox: $localStorage.userEmail
          })
        };

        removeStatements(st_selector);
      },

      testSaveBookmark: function () {
        saveBookmark({chapter: 1, page: 0});
      },

      getAllVerbs: function () {
        return [
          TinCanManager.get.VERB.attempted,
          TinCanManager.get.VERB.initialized,
          TinCanManager.get.VERB.completed,
          TinCanManager.get.VERB.exited,
          TinCanManager.get.VERB.experienced,
          TinCanManager.get.VERB.failed,
          TinCanManager.get.VERB.passed,
          TinCanManager.get.VERB.mastered,
          TinCanManager.get.VERB.suspended,
          TinCanManager.get.VERB.voided
        ];
      },

      getAllActors: function () {
        return [
          {
            "mbox": "mailto:testUser@usermail.com",
            "name": "Mr User"
          },
          {
            "mbox": "mailto:superuser@usermail.com",
            "name": "Super User"
          },
          {
            "mbox": "mailto:admin@usermail.com",
            "name": "Admin"
          }
        ];
      },

      getAllActivities: function () {
        return [
          {
            id: "http://adlnet.gov/courses/courseId",
            definition: {
              name: {
                "ru": "Демо Курс",
                "en-US": "Demo Course"
              },
              description: {
                "ru": "Описание курса на русском языке",
                "en-US": "Course description in English"
              },
              type: "http://adlnet.gov/expapi/activities/course"
            }
          },
          {
            id: "http://adlnet.gov/courses/chapterId",
            definition: {
              name: {
                "ru": "Демо chapter",
                "en-US": "Demo chapter"
              },
              description: {
                "ru": "Описание chapter на русском языке",
                "en-US": "chapter description in English"
              },
              type: "http://adlnet.gov/expapi/activities/chapter"
            }
          },
          {
            id: "http://adlnet.gov/courses/pageId",
            definition: {
              name: {
                "ru": "Демо page",
                "en-US": "Demo page"
              },
              description: {
                "ru": "Описание page на русском языке",
                "en-US": "page description in English"
              },
              type: "http://adlnet.gov/expapi/activities/page"
            }
          },
          {
            id: "http://adlnet.gov/courses/lessonId",
            definition: {
              name: {
                "ru": "Демо lesson",
                "en-US": "Demo lesson"
              },
              description: {
                "ru": "Описание lesson на русском языке",
                "en-US": "lesson description in English"
              },
              type: "http://adlnet.gov/expapi/activities/lesson"
            }
          },
          {
            id: "http://adlnet.gov/courses/interactionId",
            definition: {
              name: {
                "ru": "Демо interaction",
                "en-US": "Demo interaction"
              },
              description: {
                "ru": "Описание interaction на русском языке",
                "en-US": "interaction description in English"
              },
              type: "http://adlnet.gov/expapi/activities/interaction"
            }
          },
          {
            id: "http://adlnet.gov/courses/mediaId",
            definition: {
              name: {
                "ru": "Демо media",
                "en-US": "Demo media"
              },
              description: {
                "ru": "Описание media на русском языке",
                "en-US": "media description in English"
              },
              type: "http://adlnet.gov/expapi/activities/media"
            }
          }
        ];
      }
    }
  }]);

/**
 * Created by aklimenko on 07.05.16.
 *
 */
"use strict";

angular.module('coreApp')
  .controller('MainCtrl',
    ['$scope',
      function ($scope) {
      }]);

/**
 * Created by User on 6/3/2016.
 */

angular.module('coreApp')
  .directive('testPutStatement', [function () {
    return {
      replace: false,
      link: function () {

      },
      templateUrl:'testPutStatementTmp.html'
    }
  }]);
/**
 * Created by User on 6/3/2016.
 */

angular.module('coreApp')
  .directive('testPostStatements', [function () {
    return {
      replace: false,
      link: function () {

      },
      templateUrl:'testPostStatementsTmp.html'
    }
  }]);
/**
 * Created by User on 6/3/2016.
 */

angular.module('coreApp')
  .directive('testSaveState', [function () {
    return {
      replace: false,
      link: function () {

      },
      templateUrl:'testSaveStateTmp.html'
    }
  }]);
/**
 * Created by User on 6/3/2016.
 */

angular.module('coreApp')
  .directive('setupLrs', [function () {
    return {
      replace: false,
      link: function () {

      },
      templateUrl:'setupLrsTmp.html'
    }
  }]);

/**
 * Created by User on 6/3/2016.
 */
'use strict';
 
angular.module('coreApp')
  .controller('TestPutStatementCtrl',
    [
      '$scope',
      '$localStorage',
      'TinCanManager',
      'TestTinCanService',
      function ($scope, $localStorage, TinCanManager, TestTinCanService) {
        var self = this;

        self.verbs = TestTinCanService.getAllVerbs();
        self.actors = TestTinCanService.getAllActors();
        self.activities = TestTinCanService.getAllActivities();

        self.getStatement = function () {

          var actor = self.actors[self.actor];
          var activity = self.activities[self.activity];
          var verb = self.verbs[self.verb];

          if (actor && activity && verb) {
            return new TinCan.Statement({
              actor: actor,
              target: new TinCan.Activity({
                id: activity.id,
                definition: new TinCan.ActivityDefinition({
                  name: activity.definition.name,
                  description: activity.definition.description,
                  type: activity.definition.type
                })
              }),
              verb: verb
            }, {
              storeOriginal: false,
              doStamp: true
            })
          } else {
            return null
          }
        };

        self.sendStatement = function () {
          if (self.getStatement()) {
            TinCanManager.sendStatement(self.getStatement()).then(
              function (response) {
                console.log('sendStatements resolved:', response);
                self.requestResults = response;
              },
              function (err) {
                console.log('sendStatements rejected:', err);
                self.requestResults = err;
              }
            )
          }
        };
      }]);
/**
 * Created by User on 6/3/2016.
 */
'use strict';
 
angular.module('coreApp')
  .controller('TestPostStatementsCtrl',
    [
      '$scope',
      '$localStorage',
      'TinCanManager',
      'TestTinCanService',
      function ($scope, $localStorage,TinCanManager, TestTinCanService) {
        var self = this;

        self.verbs = TestTinCanService.getAllVerbs();
        self.actors = TestTinCanService.getAllActors();
        self.activities = TestTinCanService.getAllActivities();
        self.statements = $localStorage.statements =[];

        self.addRandomStatement = function () {
          var actor = self.actors[Math.floor(Math.random()*self.actors.length)];
          var activity = self.activities[Math.floor(Math.random()*self.activities.length)];
          var verb = self.verbs[Math.floor(Math.random()*self.verbs.length)];


          var stmt = new TinCan.Statement({
            actor: actor,
            target: new TinCan.Activity({
              id: activity.id,
              definition: new TinCan.ActivityDefinition({
                name: activity.definition.name,
                description: activity.definition.description,
                type: activity.definition.type
              })
            }),
            verb: verb
          }, {
            storeOriginal: false,
            doStamp: true
          });

          if (!$localStorage.statements.length) $localStorage.statements=[];
          $localStorage.statements.push(stmt);
          self.statements = $localStorage.statements;
        };

        self.removeStatement = function(index){
          $localStorage.statements.splice(index,1);
        };

        self.sendStatements = function(){
          TinCanManager.sendStatements().then(
            function (response) {
              console.log('sendStatements resolved:', response);
              self.requestResults = response;
            },
            function (err) {
              console.log('sendStatements rejected:', err);
              self.requestResults = err;
            }
          )
        }
      }]);
/**
 * Created by User on 6/3/2016.
 */
'use strict';
 
angular.module('coreApp')
  .controller('TestSaveStateCtrl',
    [
      '$scope',
      '$localStorage',
      'TinCanManager',
      'TestTinCanService',
      function ($scope, $localStorage, TinCanManager, TestTinCanService) {
        var self = this;
        self.progress = {
          position: {
            chapter: 1,
            page: 2,
            component: 3
          },
          scores: [100, 10, 0, 20]
        };

        self.saveState = function (key,value) {
          TinCanManager.sendState(key,value).then(
            function(response){
              console.log('save State resolved:', response);
              self.requestResults = response;
            },
            function(err){
              console.log('save State rejected:', err);
              self.requestResults = err;
            }
          );
        }
      }]);
/**
 * Created by User on 6/3/2016.
 */
'use strict';

angular.module('coreApp')
  .controller('SetupLrsCtrl',
    [
      '$scope',
      '$localStorage',
      'TinCanManager',
      'TestTinCanService',
      '$tincanConfig',
      function ($scope,
                $localStorage,
                TinCanManager,
                TestTinCanService,
                $tincanConfig) {
        var ctrl = this;
        ctrl.lrsList = $tincanConfig.lrs;
        ctrl.lrsObjects = TinCanManager.get.lrsList;

        ctrl.addLrs = function (id, endpoint, username, pwd) {
          $tincanConfig.lrs.push(
            {
              "id": id,
              "endpoint": endpoint,
              "username": username,
              "password": pwd
            });
          ctrl.lrsList = $tincanConfig.lrs;
          ctrl.lrsObjects = TinCanManager.get.lrsList;
          ctrl.lrsId='';
          ctrl.lrsEndpoint='';
          ctrl.lrsUsername='';
          ctrl.lrsPassword='';
        };

        ctrl.removeLrs = function(index){
          $tincanConfig.lrs.splice(index,1);
          ctrl.lrsList = $tincanConfig.lrs;
          ctrl.lrsObjects = TinCanManager.get.lrsList;
        };
      }]);